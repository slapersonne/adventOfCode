import math
import re
from random import randrange

map_str_1 = [
    "         A           ",
    "         A           ",
    "  #######.#########  ",
    "  #######.........#  ",
    "  #######.#######.#  ",
    "  #######.#######.#  ",
    "  #######.#######.#  ",
    "  #####  B    ###.#  ",
    "BC...##  C    ###.#  ",
    "  ##.##       ###.#  ",
    "  ##...DE  F  ###.#  ",
    "  #####    G  ###.#  ",
    "  #########.#####.#  ",
    "DE..#######...###.#  ",
    "  #.#########.###.#  ",
    "FG..#########.....#  ",
    "  ###########.#####  ",
    "             Z       ",
    "             Z       "
]

map_str_2 = [
    "                   A               ",
    "                   A               ",
    "  #################.#############  ",
    "  #.#...#...................#.#.#  ",
    "  #.#.#.###.###.###.#########.#.#  ",
    "  #.#.#.......#...#.....#.#.#...#  ",
    "  #.#########.###.#####.#.#.###.#  ",
    "  #.............#.#.....#.......#  ",
    "  ###.###########.###.#####.#.#.#  ",
    "  #.....#        A   C    #.#.#.#  ",
    "  #######        S   P    #####.#  ",
    "  #.#...#                 #......VT",
    "  #.#.#.#                 #.#####  ",
    "  #...#.#               YN....#.#  ",
    "  #.###.#                 #####.#  ",
    "DI....#.#                 #.....#  ",
    "  #####.#                 #.###.#  ",
    "ZZ......#               QG....#..AS",
    "  ###.###                 #######  ",
    "JO..#.#.#                 #.....#  ",
    "  #.#.#.#                 ###.#.#  ",
    "  #...#..DI             BU....#..LF",
    "  #####.#                 #.#####  ",
    "YN......#               VT..#....QG",
    "  #.###.#                 #.###.#  ",
    "  #.#...#                 #.....#  ",
    "  ###.###    J L     J    #.#.###  ",
    "  #.....#    O F     P    #.#...#  ",
    "  #.###.#####.#.#####.#####.###.#  ",
    "  #...#.#.#...#.....#.....#.#...#  ",
    "  #.#####.###.###.#.#.#########.#  ",
    "  #...#.#.....#...#.#.#.#.....#.#  ",
    "  #.###.#####.###.###.#.#.#######  ",
    "  #.#.........#...#.............#  ",
    "  #########.###.###.#############  ",
    "           B   J   C               ",
    "           U   P   P               "
]
map_str_f = [
    "                                         S       U A   R     G     V       B       L                                       ",
    "                                         X       Y A   U     T     M       Y       G                                       ",
    "  #######################################.#######.#.###.#####.#####.#######.#######.#####################################  ",
    "  #...#.#.#...................#...#.#...#...#.#.#.#.....#...#...#...#.#.......#.....#...#...#.....#.........#.....#...#.#  ",
    "  ###.#.#.###.###.#####.###.#####.#.#.#.#.###.#.#.#.#####.#.###.#.###.#######.#.###.#.#####.###.###.#####.#.#.#####.#.#.#  ",
    "  #.............#.#.....#.............#...#...#.#.#.#...#.#.#...#.....#...#.#.#...#.......#.........#...#.#.#...#.#.#.#.#  ",
    "  ###.#####.#.#.#.#.#.#####.#####.#.#######.#.###.#.#.#.#.#.#.###.#.#.###.#.#.###.#####.###.#########.#########.#.###.#.#  ",
    "  #...#.....#.#.#.#.#.#.....#...#.#.....#.#.#.....#...#.#.#.#...#.#.#...#.#...#.......#.#.........#.....#.....#...#.....#  ",
    "  #.#####.###.#.###############.###.#####.#.###########.#.#.#.###.###.###.#.#####.#.#.###.#####.###.#########.#.#.#####.#  ",
    "  #.#.#.....#.#.#.........................#.......#.#...#.#.....#.#.#...#.....#...#.#...#...#...........#.......#...#.#.#  ",
    "  ###.#.#.###########.###########.#######.###.#.#.#.#.###.#####.###.#.#####.###.#########.#######.###########.###.###.#.#  ",
    "  #.....#.#.#...#...#.#.#.#.#.#...#.#.....#...#.#.#...#...#...#.#.......#.....#.#.#.#.#.#.......#.#...#...#...#.#.#.#.#.#  ",
    "  #.###.###.#.#####.###.#.#.#.#.###.#.#.###.#####.#.#.###.#.#########.#.#.###.#.#.#.#.#.#.#.#######.#####.#.#.#.#.#.#.#.#  ",
    "  #.#.....#.#.............#.#.#.#.....#.#.#.#.....#.#.#.#...#.....#.#.#.#.#...#.#.#.......#.#.....#.#.#...#.#.#.#.#...#.#  ",
    "  #####.###.#############.#.#.#####.#.###.###.###.###.#.#.#.#####.#.#.#######.#.#.#.###.#.#.###.###.#.###.###.#.###.###.#  ",
    "  #.#.#.#.#.#.....#.......#.......#.#...#.....#.#.#...#.#.#...#.....#.#.#.#...#.......#.#.#.#.....#...#...#...#.....#...#  ",
    "  #.#.###.#.#.#.#.#####.#.###.###.###.#####.#.#.#.###.#.#.###.###.###.#.#.#.#.###.###########.#####.#.###.###.#.#.#####.#  ",
    "  #.....#...#.#.#...#.#.#...#...#.....#.....#.#.#.#...#.....#.#.........#...#.#.........#.....#...#.#...#.......#.#.....#  ",
    "  #####.#.#####.#.#.#.#.#.#######.###.###.#.###.###.#.#.#.#####.#####.#######.#.#########.#######.#.#####.#############.#  ",
    "  #.#.#...#...#.#.#.#.#.#.........#...#...#...#.....#.#.#.....#.#.#.....#...#.#.....#.........#.#.#.....#.....#.#.#.....#  ",
    "  #.#.###.#.#####.###.###.#####.###.#########.#.###.#######.#####.###.#####.#.#.#####.#.#######.#.#.#.###.#.#.#.#.###.#.#  ",
    "  #.#.#...#.....#...#.....#.#.....#...#.#...#.#.#...#.#.....#...#.......#.#...#...#...#.#.#.#.......#.#...#.#.#.#...#.#.#  ",
    "  #.#.###.#.#####.#####.#.#.#######.###.#.###.###.#.#.###.###.###.#.#.###.#.###.#####.###.#.#.#####.###.#######.#.#####.#  ",
    "  #.....#.#...#.#...#.#.#.#.#.....#...#.........#.#...#.........#.#.#.....#.#.#.#...#.#.#.........#.#.#.#...#...#...#.#.#  ",
    "  ###.###.#.###.#.###.#.#.#.#####.#.###.###.###.#####.#######.#######.#####.#.#.#.###.#.#.###.#######.#.#.#.#.#####.#.#.#  ",
    "  #...#.....#.........#.#.#.#.........#.#.#.#.#.#.#.....#.....#.......#.#.....#...........#.....#.#.#...#.#.#...#...#.#.#  ",
    "  ###.#.###.#####.#########.###.###.#####.#.#.###.#.#.###.#########.#.#.#####.###.###.###########.#.###.#.###.#####.#.#.#  ",
    "  #.#...#.#...#.#.#...#.#.#.#...#.....#.....#.#.....#.#...#...#.....#.#.......#.....#.#.#.#.#...#.....#...#.....#.....#.#  ",
    "  #.#####.#.###.#.#.###.#.#.#######.#####.#.#.#####.###.#.#.#.###.#####.#########.###.#.#.#.#.###.#####.###.#########.#.#  ",
    "  #.#...#.......#.#.#.....#...........#...#.#.#.#.....#.#...#...#.....#.........#.#.....#.....#.....#...........#.......#  ",
    "  #.#.#######.###.#.###.#.#########.#######.#.#.###.#.#####.#.#.#####.#######.#.###.#######.#.###.#########.#.#####.#.###  ",
    "  #...#...#.#.#.#...#...#.#...#.#.........#.....#...#...#...#.#.#.....#.......#...#.....#...#.#.#...#.#.#...#.#...#.#.#.#  ",
    "  ###.###.#.#.#.#.#####.#####.#.#######.###.###########.#######.#.#####.#############.#######.#.#.###.#.###.#####.###.#.#  ",
    "  #.#.#.#...#...#.#...#.#...#...#      E   X           K       R X     V             W    #.........#...#...#...#.#...#.#  ",
    "  #.#.#.#.#####.#.#.###.#.###.###      N   I           H       F B     M             D    #.###.#######.#.#.###.#.#.###.#  ",
    "  #.....#.....#...........#.....#                                                         #.#.....#.....#.#.#.#.#.......#  ",
    "  #.###.#.###.#.#####.#.#.#.###.#                                                         #####.#######.#.###.#.###.#.###  ",
    "  #.#...#...#...#.....#.#.#...#..UO                                                     QA..#.............#.#.......#.#..MB",
    "  #.#.#####.###.###.#.#.#.#.#.###                                                         #.#.#.#.###.###.#.#.###.#####.#  ",
    "HV..#.....#.#.....#.#.#.#.#.#...#                                                         #...#.#.#.....#...#.#...#.....#  ",
    "  #######.#.#.#####.#.###.#####.#                                                         #########.#.###.#.#.#.#####.#.#  ",
    "  #.#...#...#.#.#...#.#.#.......#                                                         #.....#...#.#.#.#...#.#.....#.#  ",
    "  #.#.#########.#######.#########                                                         ###.#########.#.#.###.#.#.#.#.#  ",
    "  #.......#...#.......#.....#...#                                                         #...#.......#.#.#...#...#.#.#..ZZ",
    "  #.#.#.#.#.#.#.#.###.#.###.#.#.#                                                         ###.#####.###.#.#.###.#.#######  ",
    "  #.#.#.#...#.#.#.#...#.#.....#.#                                                         #...#.#.#.#...#.#.#...#.#.#.#..YX",
    "  #.#####.#.#.#.#.#.###.#######.#                                                         #.#.#.#.#.#.#.#.#########.#.#.#  ",
    "  #.....#.#.#...#.#.#...#.#.....#                                                       GT..#.....#...#.#...#.....#.....#  ",
    "  #.#.#############.###.#.###.###                                                         #.#.#.#.#.###.#######.###.#.#.#  ",
    "XI..#.#.#...#.#...#.......#......AO                                                       #.#.#.#...#...#.#.#...#.#.#.#.#  ",
    "  #.#.#.###.#.###.#######.###.#.#                                                         ###.#####.#.###.#.###.#.#.#####  ",
    "  #.#.#.......#.........#.#.#.#.#                                                         #...#.#...#.................#.#  ",
    "  #####.###.###.#####.#.###.#.###                                                         ###.#.###.#.###.#.###.#######.#  ",
    "WD......#...........#.#.....#.#.#                                                         #.#.#.....#.#.#.#.#.#.#...#....AO",
    "  #.###.#####.#.###########.###.#                                                         #.#########.#.###.#.###.#.#.###  ",
    "  #.#.....#...#...#.........#...#                                                         #...#.........#.#.#.#...#.#...#  ",
    "  #.#########.#.#######.#####.#.#                                                         #.#############.###.#.#.#.#.#.#  ",
    "  #...#...#.#.#.#...#.........#..MB                                                     PI..#...#.#.#.#...#.....#.#.#.#.#  ",
    "  #######.#.#.#####.#.###.#.#.###                                                         #.###.#.#.#.#.#####.#.###.###.#  ",
    "  #...#.....#.#.#.#.#...#.#.#.#..UY                                                       #...................#.#.......#  ",
    "  #.###.#######.#.#.###########.#                                                         #######.#######################  ",
    "ZY....#...#.....#.#.#.#..........HV                                                     RU......#.#...............#...#..PI",
    "  #.#.#.#####.#.#.#.#.#####.#.###                                                         #####.###.###.###.###.#.#.#.#.#  ",
    "  #.#.....#...#.........#...#...#                                                         #...#.#...#.....#.#.#.#...#...#  ",
    "  #.###.#####.###.###.###.###.#.#                                                         #.###.#.###.###.#.#.#.#.#######  ",
    "OQ..#.#.......#.#...#.......#.#.#                                                         #.#...#...#...#.#...#.#.....#.#  ",
    "  ###.#########.###############.#                                                         ###.###.#####.#########.#####.#  ",
    "  #...............#.#.......#...#                                                         #.......#...#...#.#...#.#.#...#  ",
    "  #.###.#####.#####.#.#####.#####                                                         ###########.#####.###.###.#.###  ",
    "  #.#.#.....#...#.#.....#.....#.#                                                         #.............#.#...........#.#  ",
    "  ###.###.###.###.#####.#.#####.#                                                         #.###.###.#.###.###.#.#####.#.#  ",
    "  #.....#.#...#.#.#.....#.......#                                                       OQ..#.....#.#.#.#.....#.....#.#..WA",
    "  #.###.#.#.###.#.#.#########.###                                                         #.#.#########.#####.#######.#.#  ",
    "UO..#.#...#.............#.#.#....SX                                                       #.#.....#.#...#...#...#.....#.#  ",
    "  ###.###############.###.#.#####                                                         ###.###.#.###.###.#.#######.#.#  ",
    "  #.......#.........#.#...#.....#                                                         #.#.#.#.............#.#.......#  ",
    "  #.#.#.#.#.#.###.#.###.#.#.###.#                                                         #.###.#####.#.###.#.#.#######.#  ",
    "  #.#.#.#...#...#.#.....#.....#..BY                                                     WA....#.....#.#.#...#...#...#.#.#  ",
    "  #.###############.#######.###.#                                                         ###.#.###.###.#########.###.###  ",
    "RF....#.#.#...#.....#.#.#...#.#.#                                                         #...#.#...#.......#...#.#.#.#.#  ",
    "  #####.#.###.#######.#.#####.###                                                         #.###.###.###.#####.###.#.#.#.#  ",
    "  #.#.#.#.................#.#....TR                                                       #.....#.....#...#.#.....#.#...#  ",
    "  #.#.#.#.#.#.#.###.#.###.#.###.#                                                         #.###.###.#######.#.#.###.#.###  ",
    "XB....#...#.#.#.#...#.#.........#                                                         #...#.#.#...........#..........KH",
    "  ###.#.#.#.#.#####.#####.#.#.###                                                         #.#####.#.###.#.#.#.###.#.###.#  ",
    "  #...#.#.#.#.#.....#.#...#.#...#                                                         #...#.......#.#.#.#.#.#.#.#...#  ",
    "  ###.#.#####.###.#.#.#.#.#.#.###                                                         ###.###.#####.#.###.#.#.#####.#  ",
    "  #.......#.....#.#...#.#.#.#...#                                                         #...#.....#.#.#...#.#.......#.#  ",
    "  ###.#.#####.#.###.#.#####.###.#            Z       M   Y           M       P   L        #.#.#.#.###.#.#.###.#.#.#######  ",
    "  #...#.#...#.#.#...#...#...#...#            Y       W   X           D       S   G        #.#.#.#.#.....#...#.#.#.......#  ",
    "  ###.###.#########.#########################.#######.###.###########.#######.###.###########.###.#.#.#.###.#####.###.###  ",
    "  #.........#...#.......#.#.......#.....#...#.#.#...#.#.........#.......#.#.#.#...#.......#.#...#.#.#.#...#.....#...#...#  ",
    "  #.###.#####.###.#.#.###.###.#########.#.#.#.#.#.#.#.#.#.#.###.###.#.###.#.#.#.#####.#.###.#.#####.###.###.#####.#.#.###  ",
    "  #.#.........#...#.#.#.........#.#.#.....#...#...#...#.#.#...#.#.#.#...#.#...#.....#.#.....#...#.#.#.#.#.#.....#.#.#...#  ",
    "  #####.#.###.#.###.#########.#.#.#.#.###.#####.#.#####.#########.###.###.###.###.###.#.#######.#.###.#.#.###.#####.#.###  ",
    "  #.#...#...#.#.#.....#.#.#...#.#.....#.....#.#.#.#...........#.....#.....#.#.#...#.#.#.#...#.#.#...........#...#...#...#  ",
    "  #.#.#.#.#.###########.#.#.#.###.#.#######.#.#.#######.#.#######.###.#.###.#.#.###.#.###.###.###.###.#####.#.#.###.###.#  ",
    "  #.#.#.#.#.........#.....#.#.#.#.#.#.........#...#.....#.#.#...#.#...#.#.#...#.......#.........#...#...#...#.#...#.#...#  ",
    "  #.#.###.#######.#######.###.#.#.#######.#######.#######.#.#.#.#.#.#####.#.###.###.#.#.###.#########.###.#.#.#####.###.#  ",
    "  #...#.........#.#...#.........#.#.#.....#.#.#.....#.......#.#.#.....#.......#...#.#.....#...#.#...#.#.#.#.#...#.....#.#  ",
    "  ###.#.#########.#.#######.#.#.###.###.#.#.#.#.###.#.#.#######.#.#####.#.#.#.#######.###.#.###.#.###.#.###.#.###.#.###.#  ",
    "  #.#.#.#...#...#.#.#.#.#...#.#.........#.#.....#.#.#.#...#.#.........#.#.#.#.#.........#.#.#...#.#.......#.#...#.#.#...#  ",
    "  #.#.###.#####.###.#.#.###.#####.#####.###.###.#.#####.###.#.#.#####.#######.#####.###########.#.###.#######.#####.###.#  ",
    "  #.....#.........#.........#.....#.......#.#.#.....#.#...#.#.#...#.#...#.....#.......#.......#.....#...#.......#.....#.#  ",
    "  #####.#.###.###########.#####.###.###.###.#.#.#####.#.###.#.#.###.#.#######.#####.###.#.#.###.###.#.#####.#.#.###.#.###  ",
    "  #.........#...#.#.......#.#...#...#.....#.#...#...........#.#...#.#.#.#.......#.#.....#.#.#.#...#.#.#...#.#.#...#.#...#  ",
    "  #.###.#########.#.#####.#.###.#.#####.###.#.#.#######.#######.#.#.###.###.###.#.#.#########.#.#####.#.#####.#####.###.#  ",
    "  #...#.......#.....#.#...#.....#.#.......#.#.#...#.....#.......#.#.......#...#.#.#.#.#...........#.......#.#...#...#...#  ",
    "  #.#.###.###.#.#####.###########.#####.#.#####.#######.###.###.#########.#.#####.#.#.#.#.###########.#####.#.#.#.#.#.###  ",
    "  #.#.#...#...#.#.........#.#...#.#.#.#.#.#...........#...#.#.#...#...........#.........#.....#...#.........#.#.#.#.#...#  ",
    "  #.#.#.###.#############.#.#.#####.#.#.###.#.#.#########.###.#.#############.#.#####.###.#####.###.#.#.###.###.#######.#  ",
    "  #.#.#...#.#.#.#.#.....#.#.#.#...#.......#.#.#.#.#.....#.....#...#.#.#...#...#...#...#.#.#.#.....#.#.#...#.#.........#.#  ",
    "  ###.#.#.###.#.#.#####.#.#.#.###.#####.#.#####.#.#.###.#####.#.###.#.#.###.#.###.#####.###.#.#########.#.###.###.###.#.#  ",
    "  #.#.#.#.#.....#.#.....................#...#.....#.#.#.......#...#...#...#.#.#.......#...............#.#.#.....#...#.#.#  ",
    "  #.#.#########.#.#.#.#.###.#####.#.###.#######.#####.###.#####.#####.#.#.#.#.#.#######.###.#.###.###.###########.#####.#  ",
    "  #.....#...#.......#.#.#.....#.#.#.#.....#.#.#.#.....#.#.#.#.#...#.....#...#.#.........#.#.#.#...#.....#.......#...#...#  ",
    "  #.#######.#.#####.###.#######.#######.###.#.#.###.###.#.#.#.###.#####.###.###.#########.#.###.#.#####.#.#######.#.###.#  ",
    "  #.#...#...#.#.....#...#.............#.#.....#.......#.....#.#.......#.#.#.#.............#...#.#...#.......#.#.#.#...#.#  ",
    "  #.#.#.#.#.#.#####.###.#####.#######.#.#.#.#########.#.#####.#######.#.#.#####.###############.#.#.#.###.###.#.#####.###  ",
    "  #.#.#...#.....#...#...#.....#...........#.....#.....#.......#.......#...#...................#.#.#.#...#...........#...#  ",
    "  ###########################################.###.#########.#######.#####.#########.#####################################  ",
    "                                             M   T         P       Q     M         E                                       ",
    "                                             W   R         S       A     D         N                                       "
]
outer_portals = {}
inner_portals = {}
keys_positions = {}
full_map = {}
alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"


def get_outer_portals(input_str):
    outer_portals = dict()
    for y in range(2, len(input_str) - 2):
        # LEFT
        if input_str[y][0] in alphabet:
            portal = input_str[y][0:2]
            position = (2, y)
            outer_portals[portal] = position
        # RIGHT
        if input_str[y][-1] in alphabet:
            portal = input_str[y][-2:]
            position = (len(input_str[0]) - 3, y)
            outer_portals[portal] = position
    for x in range(2, len(input_str[0]) - 2):
        # TOP
        if input_str[0][x] in alphabet:
            portal = input_str[0][x] + input_str[1][x]
            position = (x, 2)
            outer_portals[portal] = position
        # BOTTOM
        if input_str[-1][x] in alphabet:
            portal = input_str[-2][x] + input_str[-1][x]
            position = (x, len(input_str) - 3)
            outer_portals[portal] = position
    return outer_portals


def get_inner_portals(input_str):
    left_x, right_x, top_y, bottom_y = -1, -1, -1, -1
    for y in range(2, len(input_str) - 2):
        if top_y == -1 and " " in input_str[y].strip():
            top_y = y
        if top_y != - 1 and " " not in input_str[y].strip():
            bottom_y = y-1
            break
    line = input_str[top_y]
    for x in range(2, len(line) - 2):
        if left_x == -1 and line[x] == " ":
            left_x = x
        if left_x != -1 and line[x] in ["#", "."]:
            right_x = x - 1
            break

    inner_portals = dict()
    for y in range(top_y, bottom_y + 1):
        # LEFT
        left_portal = input_str[y][left_x:left_x+2]
        if " " not in left_portal:
            position = (left_x-1, y)
            inner_portals[left_portal] = position
        # RIGHT
        right_portal = input_str[y][right_x-1:right_x+1]
        if " " not in right_portal:
            position = (right_x+1, y)
            inner_portals[right_portal] = position
    for x in range(left_x, right_x + 1):
        # TOP
        top_portal = input_str[top_y][x] + input_str[top_y + 1][x]
        if " " not in top_portal:
            position = (x, top_y - 1)
            inner_portals[top_portal] = position
        # BOTTOM
        bottom_portal = input_str[bottom_y - 1][x] + input_str[bottom_y][x]
        if " " not in bottom_portal:
            position = (x, bottom_y + 1)
            inner_portals[bottom_portal] = position
    return inner_portals


def run_20(input_str):
    global outer_portals
    global inner_portals
    outer_portals = get_outer_portals(input_str)
    inner_portals = get_inner_portals(input_str)
    print(outer_portals)
    print(inner_portals)
    all_distances = compute_all_portal_distances(input_str)
    all_distances_list = [(portals, distance) for portals, distance in all_distances.items()]
    all_distances_list.sort()
    for distance in all_distances_list:
        print(distance)


def compute_all_portal_distances(input_str):
    portals_to_check = outer_portals if len(outer_portals) > len(inner_portals) else inner_portals
    all_portal_distances = {}
    for portal in portals_to_check.items():
        all_portal_distances.update(compute_portal_distances(input_str, portal))
    return all_portal_distances


def compute_portal_distances(input_str, portal):
    portal, origin = portal
    is_origin_outer = origin[0] in [2, len(input_str[0]) - 3] or origin[1] in [2, len(input_str) - 3]
    portal_distances = {}
    computed_values = {origin: 0}
    is_discovery = True
    distance = 0
    while is_discovery:
        is_discovery = False
        distance += 1
        new_computed_values = {}
        for position, _ in [(pos, dis) for pos, dis in computed_values.items() if dis == distance - 1]:
            x, y = position
            for i, j in [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]:
                if input_str[j][i] not in ["#", " "] and (i, j) not in computed_values:
                    new_computed_values[(i, j)] = distance
        for (x, y), distance in new_computed_values.items():
            is_discovery = True
            value = input_str[y][x]
            if value in alphabet:
                other_letter = [
                    value
                    for i, j in [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]
                    for value in input_str[j][i]
                    if value in alphabet].pop()
                is_outer = x in [1, len(input_str[0]) - 2] or y in [1, len(input_str) - 2]
                is_reversed = (is_outer and x == 1 or y == 1) or (not is_outer and x == 89 or y == 89)
                other_portal = other_letter + value if is_reversed else value + other_letter
                other_portal = other_portal + ("-" if is_outer else "+")
                portal_key = portal + ("-" if is_origin_outer else "+")
                if other_portal != portal_key:
                    portal_distances[portal_key + " " + other_portal] = (distance, -1 if is_outer else 1)
                    portal_distances[other_portal + " " + portal_key] = (distance, -1 if is_origin_outer else 1)
            else:
                computed_values[(x, y)] = distance
    return portal_distances


def run_20a():
    run_20(map_str_f)
    x = 1
    while True:
        y = (17 + 8*x)
        if y % 19 == 0:
            y = int(y/19)
            print(x)
            print(y)
            break
        x += 1

    return

def run_20b():
    return
